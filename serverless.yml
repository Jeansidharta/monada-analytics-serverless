useDotenv: true
configValidationMode: error
unresolvedVariablesNotificationMode: error
variablesResolutionMode: 20210326

service: monada-analytics
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  defaultLambdaCors:
    origin: '*'
    headers:
      - '*'
  dotenvVars: ${file(configs.js)}
  tables:
    submissionsTable: ${self:service}-user-submissions-${sls:stage}
    usersTable: ${self:service}-users-${sls:stage}
    ratingsTable: ${self:service}-ratings-${sls:stage}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iam:
    role:
      name: ${self:service}-root-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - lambda:*
          Resource: '*'

functions:
  userCreate:
    handler: src/handlers/users/create.create
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users/create
          method: POST
    environment:
      SIGNUP_SECRET: ${self:custom.dotenvVars.SIGNUP_SECRET}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}

  userInitialize:
    handler: src/handlers/users/initializeFromCNPJ.initializeFromCNPJ
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users/initialize-from-cnpj
          method: POST
    environment:
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}

  userFetchStatus:
    handler: src/handlers/users/fetch-status.fetchStatus
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users/status
          method: POST
    environment:
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}

  userLogin:
    handler: src/handlers/users/login.login
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users/login
          method: POST
    environment:
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}

  submissionsAddCategory:
    handler: src/handlers/submissions/add-category.addCategory
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /submissions/add-category
          method: POST
    environment:
      DYNAMODB_SUBMISSIONS_TABLE: ${self:custom.tables.submissionsTable}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

  submissionsGet:
    handler: src/handlers/submissions/get.get
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /submissions
          method: GET
    environment:
      DYNAMODB_SUBMISSIONS_TABLE: ${self:custom.tables.submissionsTable}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

  createRating:
    handler: src/handlers/ratings.create
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /ratings
          method: POST
    environment:
      DYNAMODB_RATINGS_TABLE: ${self:custom.tables.ratingsTable}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

resources:
  Resources:
    submissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.submissionsTable}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: userCnpj
            AttributeType: S
        KeySchema:
          - AttributeName: userCnpj
            KeyType: HASH
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.usersTable}
        AttributeDefinitions:
          - AttributeName: cnpj
            AttributeType: S
        KeySchema:
          - AttributeName: cnpj
            KeyType: HASH
    ratingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.ratingsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
