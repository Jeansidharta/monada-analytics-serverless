useDotenv: true
configValidationMode: error
unresolvedVariablesNotificationMode: error
variablesResolutionMode: 20210326

service: monada-back
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  defaultLambdaCors:
    origin: '*'
    headers:
      - '*'
  dotenvVars: ${file(configs.js)}
  spreadsheetDatabaseID: 10o6dAfZGp2oFKW0V8uH1VnKy2y_-xxVFfnBrZhzNVfI
  tables:
    submissionsTable: ${self:service}-submissions-${sls:stage}
    usersTable: ${self:service}-users-${sls:stage}
    ratingsTable: ${self:service}-ratings-${sls:stage}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iam:
    role:
      name: ${self:service}-root-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - lambda:*
          Resource: '*'

functions:
  createRowFromNewEntry:
    handler: src/handlers/spreadsheet-updater.createRowFromNewEntry
    events:
      - stream:
          arn: arn:aws:dynamodb:us-east-1:779499078538:table/monada-back-submissions-dev/stream/2021-05-22T00:35:42.635
          enabled: true
    environment:
      DYNAMODB_SUBMISSIONS_TABLE: ${self:custom.tables.submissionsTable}
      SPREADSHEET_DATABASE_ID: ${self:custom.spreadsheetDatabaseID}
      # Token generated by user consent over OAuth2
      SPREADSHEET_ACCESS_TOKEN: ${self:custom.dotenvVars.SPREADSHEET_ACCESS_TOKEN}
      SPREADSHEET_REFRESH_TOKEN: ${self:custom.dotenvVars.SPREADSHEET_REFRESH_TOKEN}
      SPREADSHEET_SCOPE: ${self:custom.dotenvVars.SPREADSHEET_SCOPE}
      SPREADSHEET_TOKEN_TYPE: ${self:custom.dotenvVars.SPREADSHEET_TOKEN_TYPE}
      SPREADSHEET_EXPIRY_DATE: ${self:custom.dotenvVars.SPREADSHEET_EXPIRY_DATE}
      # Credentials created on google cloud console
      SPREADSHEET_CLIENT_ID: ${self:custom.dotenvVars.SPREADSHEET_CLIENT_ID}
      SPREADSHEET_CLIENT_SECRET: ${self:custom.dotenvVars.SPREADSHEET_CLIENT_SECRET}
      SPREADSHEET_REDIRECT_URIS: ${self:custom.dotenvVars.SPREADSHEET_REDIRECT_URIS}

  copyWholeDatabaseToSpreadsheet:
    handler: src/handlers/spreadsheet-updater.copyWholeDatabaseToSpreadsheet
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /spreadsheet
          method: POST
    environment:
      SWEEP_DATABASE_KEY: ${self:custom.dotenvVars.SWEEP_DATABASE_KEY}
      DYNAMODB_SUBMISSIONS_TABLE: ${self:custom.tables.submissionsTable}
      SPREADSHEET_DATABASE_ID: ${self:custom.spreadsheetDatabaseID}
      # Token generated by user consent over OAuth2
      SPREADSHEET_ACCESS_TOKEN: ${self:custom.dotenvVars.SPREADSHEET_ACCESS_TOKEN}
      SPREADSHEET_REFRESH_TOKEN: ${self:custom.dotenvVars.SPREADSHEET_REFRESH_TOKEN}
      SPREADSHEET_SCOPE: ${self:custom.dotenvVars.SPREADSHEET_SCOPE}
      SPREADSHEET_TOKEN_TYPE: ${self:custom.dotenvVars.SPREADSHEET_TOKEN_TYPE}
      SPREADSHEET_EXPIRY_DATE: ${self:custom.dotenvVars.SPREADSHEET_EXPIRY_DATE}
      # Credentials created on google cloud console
      SPREADSHEET_CLIENT_ID: ${self:custom.dotenvVars.SPREADSHEET_CLIENT_ID}
      SPREADSHEET_CLIENT_SECRET: ${self:custom.dotenvVars.SPREADSHEET_CLIENT_SECRET}
      SPREADSHEET_REDIRECT_URIS: ${self:custom.dotenvVars.SPREADSHEET_REDIRECT_URIS}

  userSignup:
    handler: src/handlers/users/signup.signup
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users
          method: POST
    environment:
      SIGNUP_SECRET: ${self:custom.dotenvVars.SIGNUP_SECRET}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}

  userLogin:
    handler: src/handlers/users/login.login
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /users/login
          method: POST
    environment:
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

  submissionsCreate:
    handler: src/handlers/submissions.create
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /submissions
          method: POST
    environment:
      DYNAMODB_SUBMISSIONS_TABLE: ${self:custom.tables.submissionsTable}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

  createRating:
    handler: src/handlers/ratings.create
    events:
      - http:
          cors: ${self:custom.defaultLambdaCors}
          path: /ratings
          method: POST
    environment:
      DYNAMODB_RATINGS_TABLE: ${self:custom.tables.ratingsTable}
      DYNAMODB_USERS_TABLE: ${self:custom.tables.usersTable}
      JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}

resources:
  Resources:
    submissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.submissionsTable}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.usersTable}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
    ratingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tables.ratingsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
